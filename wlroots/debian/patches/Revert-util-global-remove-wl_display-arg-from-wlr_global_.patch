From: =?utf-8?q?Guido_G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 17 Dec 2021 15:09:09 +0100
Subject: Revert "util/global: remove wl_display arg from
 wlr_global_destroy_safe"

This reverts commit 4377b5529279aa9dab64256d22ad0f2e9009843c.

Needed to build with wayland 1.19
---
 include/util/global.h    | 3 ++-
 types/output/output.c    | 2 +-
 types/seat/wlr_seat.c    | 2 +-
 types/wlr_drm_lease_v1.c | 2 +-
 util/global.c            | 4 ++--
 5 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/include/util/global.h b/include/util/global.h
index 1c979ab..ea0fda8 100644
--- a/include/util/global.h
+++ b/include/util/global.h
@@ -9,6 +9,7 @@
  * Globals that are created and destroyed on the fly need special handling to
  * prevent race conditions with wl_registry. Use this function to destroy them.
  */
-void wlr_global_destroy_safe(struct wl_global *global);
+void wlr_global_destroy_safe(struct wl_global *global,
+	struct wl_display *display);
 
 #endif
diff --git a/types/output/output.c b/types/output/output.c
index 2ed8c6f..91a45f1 100644
--- a/types/output/output.c
+++ b/types/output/output.c
@@ -121,7 +121,7 @@ void wlr_output_destroy_global(struct wlr_output *output) {
 		wl_list_init(wl_resource_get_link(resource));
 	}
 
-	wlr_global_destroy_safe(output->global);
+	wlr_global_destroy_safe(output->global, output->display);
 	output->global = NULL;
 }
 
diff --git a/types/seat/wlr_seat.c b/types/seat/wlr_seat.c
index 4933133..f931474 100644
--- a/types/seat/wlr_seat.c
+++ b/types/seat/wlr_seat.c
@@ -191,7 +191,7 @@ void wlr_seat_destroy(struct wlr_seat *seat) {
 		}
 	}
 
-	wlr_global_destroy_safe(seat->global);
+	wlr_global_destroy_safe(seat->global, seat->display);
 	free(seat->pointer_state.default_grab);
 	free(seat->keyboard_state.default_grab);
 	free(seat->touch_state.default_grab);
diff --git a/types/wlr_drm_lease_v1.c b/types/wlr_drm_lease_v1.c
index 7cb9974..7063e0d 100644
--- a/types/wlr_drm_lease_v1.c
+++ b/types/wlr_drm_lease_v1.c
@@ -127,7 +127,7 @@ static void drm_lease_device_v1_destroy(
 	}
 
 	wl_list_remove(&device->link);
-	wlr_global_destroy_safe(device->global);
+	wlr_global_destroy_safe(device->global, device->manager->display);
 
 	free(device);
 }
diff --git a/util/global.c b/util/global.c
index fa99a99..a0d84ed 100644
--- a/util/global.c
+++ b/util/global.c
@@ -14,7 +14,8 @@ static int destroy_global(void *_data) {
 	return 0;
 }
 
-void wlr_global_destroy_safe(struct wl_global *global) {
+void wlr_global_destroy_safe(struct wl_global *global,
+		struct wl_display *display) {
 	// Don't destroy the global immediately. If the global has been created
 	// recently, clients might try to bind to it after we've destroyed it.
 	// Instead, remove the global so that clients stop seeing it and wait an
@@ -24,7 +25,6 @@ void wlr_global_destroy_safe(struct wl_global *global) {
 	wl_global_remove(global);
 	wl_global_set_user_data(global, NULL); // safety net
 
-	struct wl_display *display = wl_global_get_display(global);
 	struct wl_event_loop *event_loop = wl_display_get_event_loop(display);
 	struct destroy_global_data *data = calloc(1, sizeof(*data));
 	if (data == NULL) {
